/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.oopcompany;

import java.awt.Event;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author com4936
 */
public class Invoice extends javax.swing.JFrame {

    /**
     * Creates new form Invoice
     */
    DatabaseConnection dbConnection = new DatabaseConnection();
    SetFont setFontMs = new SetFont();
    String lcustomerName, lemployeeName, litemName, lstock;
    LocalDate currentDate = LocalDate.now();

    public Invoice() {
        setFontMs.setFont();
        dbConnection.connectDB();
        initComponents();
        customerSelect();
        employeeSelect();
        itemSelect();
        invoiceDate.setText(currentDate.toString());
        stock.setText(itemMap.get(itemCodeList.getSelectedItem()));
        price.setText(itemMap2.get(itemCodeList.getSelectedItem()));
        bNew();
    }

    HashMap<String, String> itemMap = new HashMap<>();
    HashMap<String, String> itemMap2 = new HashMap<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bClose = new javax.swing.JButton();
        bInsert = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bNew = new javax.swing.JButton();
        customerCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        invoiceDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        customerCodeList = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        employeeCodeList = new javax.swing.JComboBox<>();
        invoiceNo = new javax.swing.JTextField();
        employeeCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        bNewItem = new javax.swing.JButton();
        bAddItem = new javax.swing.JButton();
        bUpdateItem = new javax.swing.JButton();
        bDeleteItem = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        itemCode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        stock = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        qty = new javax.swing.JTextField();
        itemCodeList = new javax.swing.JComboBox<>();
        amount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bClose.setText("Close");
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });

        bInsert.setText("Insert");
        bInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertActionPerformed(evt);
            }
        });

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        bNew.setText("New");
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });

        customerCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("เลขที่");
        jLabel3.setName(""); // NOI18N

        invoiceDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("วันที่");
        jLabel5.setName(""); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("สินค้า");

        customerCodeList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customerCodeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerCodeListActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("พนักงาน");

        employeeCodeList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        employeeCodeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeCodeListActionPerformed(evt);
            }
        });

        invoiceNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invoiceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                invoiceNoKeyPressed(evt);
            }
        });

        employeeCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("ลูกค้า");

        table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Price", "Qty", "Amount"
            }
        ));
        table.setEnabled(false);
        jScrollPane1.setViewportView(table);

        bNewItem.setText("New");
        bNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewItemActionPerformed(evt);
            }
        });

        bAddItem.setText("Add");
        bAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddItemActionPerformed(evt);
            }
        });

        bUpdateItem.setText("Update");
        bUpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateItemActionPerformed(evt);
            }
        });

        bDeleteItem.setText("Delete");
        bDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteItemActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("เป็นเงิน");
        jLabel10.setName(""); // NOI18N

        itemCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("จำนวนขาย");
        jLabel9.setName(""); // NOI18N

        stock.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        price.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("คงเหลือ");
        jLabel11.setName(""); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("ราคา");
        jLabel8.setName(""); // NOI18N

        qty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        qty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                qtyFocusLost(evt);
            }
        });
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyKeyReleased(evt);
            }
        });

        itemCodeList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        itemCodeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeListActionPerformed(evt);
            }
        });

        amount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(itemCodeList, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(13, 13, 13))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addGap(16, 16, 16)
                        .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stock)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemCodeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bNewItem)
                        .addGap(18, 18, 18)
                        .addComponent(bAddItem)
                        .addGap(18, 18, 18)
                        .addComponent(bUpdateItem)
                        .addGap(18, 18, 18)
                        .addComponent(bDeleteItem))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(55, 55, 55)
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(invoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(invoiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(customerCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(29, 29, 29)
                                    .addComponent(customerCodeList, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(employeeCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(29, 29, 29)
                                    .addComponent(employeeCodeList, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(28, 28, 28)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(bNew)
                            .addGap(18, 18, 18)
                            .addComponent(bInsert)
                            .addGap(18, 18, 18)
                            .addComponent(bUpdate)
                            .addGap(18, 18, 18)
                            .addComponent(bDelete)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bClose))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(invoiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerCodeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeCodeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bNewItem)
                    .addComponent(bAddItem)
                    .addComponent(bUpdateItem)
                    .addComponent(bDeleteItem))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bInsert)
                        .addComponent(bUpdate)
                        .addComponent(bDelete)
                        .addComponent(bClose))
                    .addComponent(bNew))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void customerSelect() {
        String sql = "select customerCode, customerName from customer";
        try {
            customerCodeList.addItem(" กรุณาเลือกลูกค้า");
            // รัน SQL Query
            ResultSet rs = dbConnection.statement.executeQuery(sql);

            // ลูปดึงข้อมูลจาก ResultSet
            while (rs.next()) {
                // ดึงค่าของ departmentName
                String formattedId = String.format("%06d", Integer.parseInt(rs.getString("customerCode")));
                String lcustomerCode = formattedId;
                String lcustomerName = rs.getString("customerName");

                // เพิ่ม departmentName ลงใน JComboBox
                customerCodeList.addItem(lcustomerCode + " " + lcustomerName);
            }
            rs.close(); // ปิด ResultSet
        } catch (SQLException ex) {
            ex.printStackTrace(); // แสดงข้อผิดพลาดถ้ามีการเกิด SQLException
        }
    }

    public void employeeSelect() {
        String sql = "select employeeCode, employeeName from employee";
        try {
            employeeCodeList.addItem(" กรุณาเลือกพนักงาน");
            // รัน SQL Query
            ResultSet rs = dbConnection.statement.executeQuery(sql);

            // ลูปดึงข้อมูลจาก ResultSet
            while (rs.next()) {
                // ดึงค่าของ departmentName
                String lemployeeCodeList = rs.getString("employeeCode");
                String lemployeeNameList = rs.getString("employeeName");

                // เพิ่ม departmentName ลงใน JComboBox
                employeeCodeList.addItem(lemployeeCodeList + " " + lemployeeNameList);
            }
            rs.close(); // ปิด ResultSet
        } catch (SQLException ex) {
            ex.printStackTrace(); // แสดงข้อผิดพลาดถ้ามีการเกิด SQLException
        }
    }

    public void itemSelect() {
        String sql = "select itemCode, itemName,qty,price from item";
        try {
            itemCodeList.addItem(" กรุณาเลือกสินค้า");
            // รัน SQL Query
            ResultSet rs = dbConnection.statement.executeQuery(sql);

            // ลูปดึงข้อมูลจาก ResultSet
            while (rs.next()) {
                // ดึงค่าของ departmentName
                String litemCode = rs.getString("itemCode");
                String litemName = rs.getString("itemName");
                // เพิ่ม departmentName ลงใน JComboBox
                itemCodeList.addItem(litemCode + " " + litemName);
                itemMap.put(litemCode + " " + litemName, rs.getString("qty"));
                itemMap2.put(litemCode + " " + litemName, rs.getString("price"));
            }
            rs.close(); // ปิด ResultSet

        } catch (SQLException ex) {
            ex.printStackTrace(); // แสดงข้อผิดพลาดถ้ามีการเกิด SQLException
        }
    }

    public void QtyCount() {
        try {
            for (int i = 0; i < table.getRowCount(); i++) {
                String sql = "update item set qty = qty+'" + table.getValueAt(i, 3) + "' where itemCode =  '" + table.getValueAt(i, 0) + "'";
                System.out.println(sql);
                dbConnection.statement.executeUpdate(sql);

                String key = table.getValueAt(i, 0) + " " + table.getValueAt(i, 1);
                if (itemMap.containsKey(key)) {
                    int currentStock = Integer.parseInt(itemMap.get(key));  // ดึงค่าปัจจุบันของ stock
                    int qtyToDeduct = Integer.parseInt(table.getValueAt(i, 3).toString());  // จำนวนที่ต้องการหักลบ

                    int newStock = currentStock - qtyToDeduct;

                    itemMap.put(key, String.valueOf(newStock));  // ใส่ค่าใหม่ที่ลดแล้วกลับลงใน itemMap
                } else {
                    System.out.println("Key not found in itemMap");
                }
            }
            JOptionPane.showMessageDialog(this, "เพิ่มข้อมูล");
        } catch (Exception ex) {
            Logger.getLogger(Department.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ลบข้อมูล");
        }
    }

    private int searchRowIndex(String code) {
        for (int i = 0; i < table.getRowCount(); i++) {
            if (code.equals(table.getValueAt(i, 0))) {
                return i;
            }
        }
        return -1;
    }

    public void calculate() {
        try {
            double value1 = Double.parseDouble(price.getText());
            double value2 = Double.parseDouble(qty.getText());
            int result = (int) value1 * (int) value2; // คำนวณผลรวม
            amount.setText(String.valueOf(result));
        } catch (NumberFormatException e) {
            amount.setText("");
        }
    }

    public void bNew() {
        String sql = "select count(*) as totalCount from invoice";
        try {
            itemCodeList.addItem(" กรุณาเลือกสินค้า");
            // รัน SQL Query
            ResultSet rs = dbConnection.statement.executeQuery(sql);
            while (rs.next()) {
                int count = rs.getInt("totalCount"); // นับจำนวนแถว
                count += 1; // เพิ่ม 1
                invoiceNo.setText(String.valueOf(count)); // แสดงผลใน invoiceNo
            }
            rs.close(); // ปิด ResultSet

        } catch (SQLException ex) {
            ex.printStackTrace(); // แสดงข้อผิดพลาดถ้ามีการเกิด SQLException
        }
        invoiceDate.setText(currentDate.toString());
        customerCode.setText(null);
        customerCodeList.setSelectedIndex(0);
        employeeCode.setText(null);
        employeeCodeList.setSelectedIndex(0);
        ((DefaultTableModel) table.getModel()).setRowCount(0);
    }

    private void bInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertActionPerformed
        if (invoiceNo.getText().trim().isEmpty() || customerCode.getText().trim().isEmpty() || employeeCode.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Insert ไม่สำเร็จ");
        } else {
            String formattedId = String.format("%08d", Integer.parseInt(invoiceNo.getText()));
            String sql = "insert into invoice values ('" + formattedId + "','" + invoiceDate.getText() + "','" + customerCode.getText() + "','" + employeeCode.getText() + "')";
            try {
//                System.out.println(sql);
                dbConnection.statement.executeUpdate(sql);
                for (int i = 0; i < table.getRowCount(); i++) {
                    sql = "insert into invoicedetail values ('" + formattedId + "','" + table.getValueAt(i, 0) + "','" + table.getValueAt(i, 2) + "','" + table.getValueAt(i, 3) + "')";
//                    System.out.println(sql);
                    dbConnection.statement.executeUpdate(sql);

                    sql = "update item set qty = qty-'" + table.getValueAt(i, 3) + "' where itemCode =  '" + table.getValueAt(i, 0) + "'";
//                    System.out.println(sql);
                    dbConnection.statement.executeUpdate(sql);

                    String key = table.getValueAt(i, 0) + " " + table.getValueAt(i, 1);
                    if (itemMap.containsKey(key)) {
                        int currentStock = Integer.parseInt(itemMap.get(key));  // ดึงค่าปัจจุบันของ stock
                        int qtyToDeduct = Integer.parseInt(table.getValueAt(i, 3).toString());  // จำนวนที่ต้องการหักลบ

                        int newStock = currentStock - qtyToDeduct;

                        itemMap.put(key, String.valueOf(newStock));  // ใส่ค่าใหม่ที่ลดแล้วกลับลงใน itemMap
                    } else {
                        System.out.println("Key not found in itemMap");
                    }
                }
                bNew();
                bNewTable();
                JOptionPane.showMessageDialog(this, "Insert สำเร็จ");
            } catch (Exception ex) {
                Logger.getLogger(Department.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Insert ไม่สำเร็จ");
            }
        }
    }//GEN-LAST:event_bInsertActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
        if (invoiceNo.getText().trim().isEmpty() || customerCode.getText().trim().isEmpty() || employeeCode.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Update ไม่สำเร็จ");
        } else {
            String formattedId = String.format("%08d", Integer.parseInt(invoiceNo.getText()));
            String sql = "update invoice set  invoiceDate = '" + invoiceDate.getText() + "',customerCode = '" + customerCode.getText() + "',employeeCode = '" + employeeCode.getText() + "' where invoiceNo = '" + formattedId + "'";
            try {
//                System.out.println(sql);
                dbConnection.statement.executeUpdate(sql);
                for (int i = 0; i < table.getRowCount(); i++) {
                    String itemCode = table.getValueAt(i, 0).toString();
                    int newQty = Integer.parseInt(table.getValueAt(i, 3).toString());

                    // ตรวจสอบว่ามีรายการใน invoicedetail หรือไม่
                    sql = "select qty from invoicedetail where itemCode = '" + itemCode + "' and invoiceNo = '" + formattedId + "'";
//                    System.out.println("Executing: " + sql);
                    ResultSet rs = dbConnection.statement.executeQuery(sql);
                    int oldQty = 0;
                    if (rs.next()) {
                        oldQty = rs.getInt("qty"); // ดึงค่า qty เก่า

                        // คืนค่า qty เก่ากลับเข้าไปใน item
                        sql = "update item set qty = qty + " + oldQty + " where itemCode = '" + itemCode + "'";
//                        System.out.println("Executing: " + sql);
                        dbConnection.statement.executeUpdate(sql);

                        // อัปเดต invoicedetail
                        sql = "update invoicedetail set price = '" + table.getValueAt(i, 2) + "', qty = '" + newQty + "' where itemCode = '" + itemCode + "' and invoiceNo = '" + formattedId + "'";
//                        System.out.println("Executing: " + sql);
                        dbConnection.statement.executeUpdate(sql);
                    } else {
                        // ถ้าไม่มีรายการ -> แทรกข้อมูลใหม่
                        sql = "insert into invoicedetail (invoiceNo, itemCode, price, qty) values ('" + formattedId + "', '" + itemCode + "', '" + table.getValueAt(i, 2) + "', '" + newQty + "')";
//                        System.out.println("Executing: " + sql);
                        dbConnection.statement.executeUpdate(sql);
                    }

                    // อัปเดตจำนวนสินค้าในตาราง item
                    sql = "update item set qty = qty - " + newQty + " where itemCode = '" + itemCode + "'";
//                    System.out.println("Executing: " + sql);
                    dbConnection.statement.executeUpdate(sql);

                    // อัปเดตข้อมูลใน itemMap
                    String key = itemCode + " " + table.getValueAt(i, 1).toString();
                    if (itemMap.containsKey(key)) {
                        int currentStock = Integer.parseInt(itemMap.get(key));
                        int newStock = currentStock - newQty + oldQty; // ปรับ stock ใหม่
                        itemMap.put(key, String.valueOf(newStock));
                    } else {
                        System.out.println("Key not found in itemMap");
                    }
                }
                bNewTable();
                JOptionPane.showMessageDialog(this, "Update สำเร็จ");
            } catch (Exception ex) {
                Logger.getLogger(Department.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Update ไม่สำเร็จ");
            }
        }
    }//GEN-LAST:event_bUpdateActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "ลบหรือไม่ ?", "ยืนยัน", 0) == 0) {
            if (invoiceNo.getText().trim().isEmpty() || customerCode.getText().trim().isEmpty() || employeeCode.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Delete ไม่สำเร็จ");
            } else {
                String formattedId = String.format("%08d", Integer.parseInt(invoiceNo.getText()));
                String sql = "delete from invoice where invoiceNo = '" + formattedId + "'";
                try {
//                    System.out.println(sql);
                    dbConnection.statement.executeUpdate(sql);
                    for (int i = 0; i < table.getRowCount(); i++) {
                        String itemCode = table.getValueAt(i, 0).toString();

                        // ดึงค่า qty ของสินค้าที่จะลบออกจาก invoicedetail
                        sql = "select qty from invoicedetail where itemCode = '" + itemCode + "' and invoiceNo = '" + formattedId + "'";
                        ResultSet rs = dbConnection.statement.executeQuery(sql);
                        if (rs.next()) {
                            int qtyToRestock = rs.getInt("qty");

                            // คืนค่า stock ใน item
                            sql = "update item set qty = qty + " + qtyToRestock + " where itemCode = '" + itemCode + "'";
//                            System.out.println(sql);
                            dbConnection.statement.executeUpdate(sql);

                            // อัปเดต itemMap หลังจากคืนค่า stock
                            String key = itemCode + " " + table.getValueAt(i, 1).toString(); // สร้าง key สำหรับ itemMap
                            if (itemMap.containsKey(key)) {
                                int currentStock = Integer.parseInt(itemMap.get(key));  // ดึง stock ปัจจุบันจาก itemMap
                                int newStock = currentStock + qtyToRestock;  // คืนค่า stock ใหม่
                                itemMap.put(key, String.valueOf(newStock));  // ใส่ค่าใหม่กลับลงใน itemMap
                            } else {
                                System.out.println("Key not found in itemMap");
                            }
                        }
                        // ลบข้อมูลจาก invoicedetail
                        sql = "delete from invoicedetail where itemCode = '" + itemCode + "' and invoiceNo = '" + formattedId + "'";
                        System.out.println(sql);
                        dbConnection.statement.executeUpdate(sql);
                    }
                    JOptionPane.showMessageDialog(this, "Delete สำเร็จ");
                    bNew();
                    bNewTable();
                } catch (Exception ex) {
                    Logger.getLogger(Department.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Delete ไม่สำเร็จ");
                }
            }
        }
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        bNew();
        bNewTable();
    }//GEN-LAST:event_bNewActionPerformed

    public void bNewTable() {
        itemCodeList.setSelectedIndex(0);
        price.setText(null);
        amount.setText(null);
    }

    private void bNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewItemActionPerformed
        bNewTable();
    }//GEN-LAST:event_bNewItemActionPerformed

    private void bAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddItemActionPerformed
        if ("".equals(itemCode.getText())) {
            JOptionPane.showMessageDialog(this, "กรุณาเลือกสินค้า");
        } else {
            int row = searchRowIndex(itemCode.getText());
            if (row == -1) {
                Object[] rowData = {itemCode.getText(), litemName, price.getText(), qty.getText(), amount.getText()};
                ((DefaultTableModel) table.getModel()).addRow(rowData);
            } else {
                JOptionPane.showMessageDialog(this, "มีสินค้าแล้ว");
            }
        }
    }//GEN-LAST:event_bAddItemActionPerformed

    private void bUpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateItemActionPerformed
        if ("".equals(itemCode.getText())) {
            JOptionPane.showMessageDialog(this, "กรุณาเลือกสินค้า");
        } else {
            int row = searchRowIndex(itemCode.getText());
            if (row > -1) {
                ((DefaultTableModel) table.getModel()).setValueAt(litemName, row, 1);
//            ((DefaultTableModel) table.getModel()).setValueAt(price.getText(), row, 2);
                ((DefaultTableModel) table.getModel()).setValueAt(qty.getText(), row, 3);
                ((DefaultTableModel) table.getModel()).setValueAt(amount.getText(), row, 4);
            } else {
                JOptionPane.showMessageDialog(this, "ไม่มีสินค้า");
            }
        }
    }//GEN-LAST:event_bUpdateItemActionPerformed

    private void bDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteItemActionPerformed
        if ("".equals(itemCode.getText())) {
            JOptionPane.showMessageDialog(this, "กรุณาเลือกสินค้า");
        } else {
            if (JOptionPane.showConfirmDialog(this, "ลบหรือไม่ ?", "ยืนยัน", 0) == 0) {
                int row = searchRowIndex(itemCode.getText());
                if (row > -1) {
                    String itemCodeToDelete = table.getValueAt(row, 0).toString(); // ดึง itemCode ที่จะลบ
                    String formattedId = String.format("%08d", Integer.parseInt(invoiceNo.getText()));

                    try {
                        // ดึงจำนวนที่ต้องลบจาก invoicedetail
                        String sql = "SELECT qty FROM invoicedetail WHERE itemCode = '" + itemCodeToDelete + "' AND invoiceNo = '" + formattedId + "'";
                        ResultSet rs = dbConnection.statement.executeQuery(sql);
                        int qtyToDelete = 0;
                        if (rs.next()) {
                            qtyToDelete = rs.getInt("qty"); // ดึง qty ที่ต้องลบ
                        }

                        // ลบข้อมูลจาก invoicedetail
                        sql = "DELETE FROM invoicedetail WHERE itemCode = '" + itemCodeToDelete + "' AND invoiceNo = '" + formattedId + "'";
                        dbConnection.statement.executeUpdate(sql);

                        // เพิ่มสต็อกกลับเข้าไปใน item
                        sql = "UPDATE item SET qty = qty + " + qtyToDelete + " WHERE itemCode = '" + itemCodeToDelete + "'";
                        dbConnection.statement.executeUpdate(sql);

                        // อัปเดตข้อมูลใน itemMap
                        String keyDelete = itemCodeToDelete + " " + table.getValueAt(row, 1).toString();
                        if (itemMap.containsKey(keyDelete)) {
                            int currentStockDelete = Integer.parseInt(itemMap.get(keyDelete));
                            itemMap.put(keyDelete, String.valueOf(currentStockDelete + qtyToDelete)); // เพิ่ม qty ที่ลบเข้าไป
                        }

                        // ลบแถวที่ถูกเลือกใน JTable
                        ((DefaultTableModel) table.getModel()).removeRow(row);
                        qty.setText(null);
                        amount.setText(null);

                        JOptionPane.showMessageDialog(this, "ลบสำเร็จ");
                        bNewTable(); // อัปเดตข้อมูลใหม่ในตาราง
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(this, "เกิดข้อผิดพลาดในการลบ: " + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "ลบไม่สำเร็จ");
                }
            }
        }
    }//GEN-LAST:event_bDeleteItemActionPerformed

    private void customerCodeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerCodeListActionPerformed
        String customerCodeL = (String) customerCodeList.getSelectedItem();
        customerCode.setText(customerCodeL.split(" ")[0]);
        lcustomerName = customerCodeL.split(" ")[1];
    }//GEN-LAST:event_customerCodeListActionPerformed

    private void employeeCodeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeCodeListActionPerformed
        String employeeCodeL = (String) employeeCodeList.getSelectedItem();
        employeeCode.setText(employeeCodeL.split(" ")[0]);
        lemployeeName = employeeCodeL.split(" ")[1];
    }//GEN-LAST:event_employeeCodeListActionPerformed

    private void itemCodeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeListActionPerformed
        String itemCodeL = (String) itemCodeList.getSelectedItem();
        itemCode.setText(itemCodeL.split(" ")[0]);
        litemName = itemCodeL.split(" ")[1];
        stock.setText(itemMap.get(itemCodeL));
        price.setText(itemMap2.get(itemCodeL));
        int row = searchRowIndex(itemCode.getText());
        if (row > -1) {
//            price.setText(((DefaultTableModel) table.getModel()).getValueAt(row, 2).toString());
            qty.setText(((DefaultTableModel) table.getModel()).getValueAt(row, 3).toString());
            amount.setText(((DefaultTableModel) table.getModel()).getValueAt(row, 4).toString());
        } else {
//            price.setText(null);
            qty.setText(null);
            amount.setText(null);
        }
    }//GEN-LAST:event_itemCodeListActionPerformed

    private void priceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceKeyReleased
        calculate();
    }//GEN-LAST:event_priceKeyReleased

    private void qtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyReleased
// ดึง itemCode จากตารางหรือ input
        String itemCodeL = (String) itemCodeList.getSelectedItem();
        itemCode.setText(itemCodeL.split(" ")[0]);
        litemName = itemCodeL.split(" ")[1];
        String itemCode1 = itemCode.getText();
        String itemName = litemName; // ตรวจสอบว่า litemName ถูกตั้งค่าหรือไม่
        String key = itemCode1 + " " + itemName;

        // เช็คว่า itemMap มี item นี้อยู่หรือไม่
        if (itemMap.containsKey(key)) {
            // ดึงจำนวน qty ที่เหลือจาก itemMap
            int availableQty = Integer.parseInt(itemMap.get(key));

            // ดึงค่าที่ผู้ใช้กรอกเข้ามา
            try {
                int enteredQty = Integer.parseInt(qty.getText());

                // ดึง oldQty จาก invoicedetail (หากมี)
                String formattedId = String.format("%08d", Integer.parseInt(invoiceNo.getText()));
                String sql = "SELECT qty FROM invoicedetail WHERE itemCode = '" + itemCode1 + "' AND invoiceNo = '" + formattedId + "'";
                ResultSet rs = dbConnection.statement.executeQuery(sql);
                int oldQty = 0; // กำหนดให้เป็น 0 หากไม่มีค่าก่อนหน้านี้
                if (rs.next()) {
                    oldQty = rs.getInt("qty"); // ดึง oldQty
                }

                // คำนวณค่ารวม
                int totalQty = enteredQty - oldQty; // คำนวณค่ารวมโดยใช้ลบ oldQty ออกจาก enteredQty
                calculate();
                // ถ้าจำนวนที่กรอกมากกว่าจำนวนที่มีในสต็อก
                if (totalQty > availableQty) {
                    JOptionPane.showMessageDialog(this, "จำนวนสินค้ามีไม่พอในสต็อก! คงเหลือ: " + (availableQty + oldQty));
                    // รีเซ็ตค่าให้คงเหลือที่สามารถกรอกได้
                    qty.setText(String.valueOf(availableQty + oldQty)); // รีเซ็ตเป็นจำนวนที่มี
                    calculate();
                } else if (enteredQty < 0) {
                    // ถ้าจำนวนที่กรอกเป็นค่าติดลบ
                    JOptionPane.showMessageDialog(this, "กรุณากรอกจำนวนที่ถูกต้อง (ไม่ให้เป็นค่าติดลบ)");
                    qty.setText("0"); // รีเซ็ตให้เป็น 0
                    calculate();
                }
            } catch (NumberFormatException e) {
//                JOptionPane.showMessageDialog(this, "กรุณากรอกจำนวนที่ถูกต้อง");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "เกิดข้อผิดพลาดในการดึงข้อมูล: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "ไม่พบสินค้าใน itemMap");
        }
    }//GEN-LAST:event_qtyKeyReleased

    private void invoiceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_invoiceNoKeyPressed
        if (evt.getKeyCode() == Event.ENTER) {
            String formattedId = String.format("%08d", Integer.parseInt(invoiceNo.getText()));
            String sql = "select invoiceDate,invoice.customerCode,invoice.employeeCode,invoicedetail.itemCode,item.itemName,invoicedetail.price,invoicedetail.qty,invoicedetail.price*invoicedetail.qty from invoice join customer on customer.customerCode = invoice.customerCode join employee on employee.employeeCode = invoice.employeeCode join invoicedetail on invoicedetail.invoiceNo = invoice.invoiceNo join item on item.itemCode = invoicedetail.itemCode where invoice.invoiceNo = '" + formattedId + "'";

            invoiceDate.setText(currentDate.toString());
            customerCode.setText(null);
            customerCodeList.setSelectedIndex(0);
            employeeCode.setText(null);
            employeeCodeList.setSelectedIndex(0);
            ((DefaultTableModel) table.getModel()).setRowCount(0);

            try {
                ResultSet rs = dbConnection.statement.executeQuery(sql);

                while (rs.next()) {
                    invoiceDate.setText(rs.getString("invoiceDate"));
                    customerCode.setText(rs.getString("invoice.customerCode"));

                    String customerCode1 = rs.getString("invoice.customerCode");

                    for (int i = 0; i < customerCodeList.getItemCount(); i++) {
                        String item = (String) customerCodeList.getItemAt(i);
                        if (item.startsWith(customerCode1 + " ")) {
                            customerCodeList.setSelectedIndex(i);
                            break;
                        }
                    }

                    employeeCode.setText(rs.getString("invoice.employeeCode"));

                    String employeeCode1 = rs.getString("invoice.employeeCode");

                    for (int i = 0; i < employeeCodeList.getItemCount(); i++) {
                        String item = (String) employeeCodeList.getItemAt(i);
                        if (item.startsWith(employeeCode1 + " ")) {
                            employeeCodeList.setSelectedIndex(i);
                            break;
                        }
                    }

                    Object[] rowData = {rs.getString("invoicedetail.itemCode"), rs.getString("item.itemName"), rs.getString("invoicedetail.price"), rs.getString("invoicedetail.qty"), rs.getString("invoicedetail.price*invoicedetail.qty")};
                    ((DefaultTableModel) table.getModel()).addRow(rowData);
                }
                rs.close();

            } catch (SQLException ex) {
                invoiceDate.setText(currentDate.toString());
                customerCode.setText(null);
                customerCodeList.setSelectedIndex(0);
                employeeCode.setText(null);
                employeeCodeList.setSelectedIndex(0);
                ((DefaultTableModel) table.getModel()).setRowCount(0);
            }
        }
    }//GEN-LAST:event_invoiceNoKeyPressed

    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        if (JOptionPane.showConfirmDialog(this, "ปิดหรือไม่ ?", "ยืนยัน", 0) == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_bCloseActionPerformed

    private void qtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyFocusLost

    }//GEN-LAST:event_qtyFocusLost

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JButton bAddItem;
    private javax.swing.JButton bClose;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bDeleteItem;
    private javax.swing.JButton bInsert;
    private javax.swing.JButton bNew;
    private javax.swing.JButton bNewItem;
    private javax.swing.JButton bUpdate;
    private javax.swing.JButton bUpdateItem;
    private javax.swing.JTextField customerCode;
    private javax.swing.JComboBox<String> customerCodeList;
    private javax.swing.JTextField employeeCode;
    private javax.swing.JComboBox<String> employeeCodeList;
    private javax.swing.JTextField invoiceDate;
    private javax.swing.JTextField invoiceNo;
    private javax.swing.JTextField itemCode;
    private javax.swing.JComboBox<String> itemCodeList;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField price;
    private javax.swing.JTextField qty;
    private javax.swing.JTextField stock;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
